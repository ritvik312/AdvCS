#BlueJ class context
comment0.target=BitInputStream
comment0.text=\n\ Reads\ bits-at-a-time\ where\ the\ number\ of\ bits\ is\ between\ 1\ and\ 32.\n\ Updated\ for\ version\ 2.0\ to\ extend\ java.io.InputStream.\ This\ class\n\ can\ be\ used\ together\ with\ <code>BitOutputStream</code>\ to\ facilitate\n\ reading\ and\ writing\ data\ several\ bits-at-a-time.\ BitInputStream\ objects\n\ that\ are\ constructed\ from\ a\ File\ support\ <code>reset()</code>.\ However,\n\ if\ constructed\ from\ an\ <code>InputStream</code>\ an\ object\ cannot\ be\ reset.\n\ <P>\n\ Any\ exceptions\ generated\ are\ rethrown\ as\ <code>RuntimeException</code>\ objects\n\ so\ client\ code\ does\ not\ have\ to\ catch\ or\ rethrow\ them.\ (Unless\ the\ extension\n\ of\ <code>InputStream</code>\ requires\ throwing\ as\ another\ type\ of\ exception,\ e.g.,\n\ as\ with\ method\ <code>read</code>.\n\ <P>\n\ @author\ Owen\ Astrachan\n\ @version\ 1.0,\ July\ 2000\n\ @version\ 2.0,\ October\ 2004\n
comment1.params=filename
comment1.target=BitInputStream(java.lang.String)
comment1.text=\n\ Construct\ a\ bit-at-a-time\ input\ stream\ from\ a\ file\ whose\n\ name\ is\ supplied.\n\ @param\ filename\ is\ the\ name\ of\ the\ file\ that\ will\ be\ read.\n\ @throws\ RuntimeException\ if\ filename\ cannot\ be\ opened.\n
comment2.params=file
comment2.target=BitInputStream(java.io.File)
comment2.text=\n\ Construct\ a\ bit-at-a-time\ input\ stream\ from\ <code>file</code>.\n\ @param\ file\ is\ the\ File\ that\ is\ the\ source\ of\ the\ input\n\ @throws\ RuntimeExceptoin\ if\ file\ cannot\ be\ opened.\n
comment3.params=in
comment3.target=BitInputStream(java.io.InputStream)
comment3.text=\n\ Open\ a\ bit-at-a-time\ stream\ that\ reads\ from\ supplied\ InputStream.\ If\ this\n\ constructor\ is\ used\ the\ BitInputStream\ is\ not\ reset-able.\n\ @param\ in\ is\ the\ stream\ from\ which\ bits\ are\ read.\n
comment4.params=
comment4.target=boolean\ markSupported()
comment4.text=\n\ Return\ true\ if\ the\ stream\ has\ been\ initialized\ from\ a\ File\ and\n\ is\ thus\ reset-able.\ If\ constructed\ from\ an\ InputStream\ it\ is\ not\ reset-able.\n\ @return\ true\ if\ stream\ can\ be\ reset\ (it\ has\ been\ constructed\ appropriately\ from\ a\ File).\n
comment5.params=
comment5.target=void\ reset()
comment5.text=\n\ Reset\ stream\ to\ beginning.\ The\ implementation\ creates\ a\ new\n\ stream.\n\ @throws\ IOException\ if\ not\ reset-able\ (e.g.,\ constructed\ from\ InputStream).\n
comment6.params=
comment6.target=void\ close()
comment6.text=\n\ Closes\ the\ input\ stream.\n\ @throws\ RuntimeException\ if\ the\ close\ fails\n
comment7.params=howManyBits
comment7.target=int\ readBits(int)
comment7.text=\n\ Returns\ the\ number\ of\ bits\ requested\ as\ rightmost\ bits\ in\n\ returned\ value,\ returns\ -1\ if\ not\ enough\ bits\ available\ to\n\ satisfy\ the\ request.\n\n\ @param\ howManyBits\ is\ the\ number\ of\ bits\ to\ read\ and\ return\n\ @return\ the\ value\ read,\ only\ rightmost\ <code>howManyBits</code>\n\ are\ valid,\ returns\ -1\ if\ not\ enough\ bits\ left\n
comment8.params=
comment8.target=int\ read()
comment8.text=\n\ Required\ by\ classes\ extending\ InputStream,\ returns\n\ the\ next\ byte\ from\ this\ stream\ as\ an\ int\ value.\n\ @return\ the\ next\ byte\ from\ this\ stream\n
numComments=9
